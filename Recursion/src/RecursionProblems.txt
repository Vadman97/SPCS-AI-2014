import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.JButton;

import acm.program.GraphicsProgram;

/**
 * Starter code for the recursion problems.
 * 
 * @author Lekan Wang (lekan@lekanwang.com)
 *
 */
public class RecursionProblems extends GraphicsProgram {
	public static void main(String[] args) {
		new RecursionProblems().start(args);
	}


	/**
	 * Put any testing code you want in here.
	 */
	private void test() {
		// --------------------------------- //
		// TODO PUT ALL YOUR TEST CODE HERE! //
		// --------------------------------- //
	}

	/**
	 * Prints out all TouchTone phone mnemonics that can be generated
	 * given the string of the phone digits.
	 * 
	 * @param str
	 */
	public void mnemonicPlease(String str) {
		// ----------------------------------- //
		// TODO IMPLEMENT MNEMONICPLEASE HERE! //
		// ----------------------------------- //
		System.out.println("NOT IMPLEMENTED");
	}

	/**
	 * Determines whether a subset of the numbers in the given set
	 * can sum up to the target.
	 * 
	 * @param nums
	 * @param target
	 * @return
	 */
	public boolean canSumTo(Set<Integer> nums, int target) {
		// ----------------------------- //
		// TODO IMPLEMENT CANSUMTO HERE! //
		// ----------------------------- //
		System.out.println("NOT IMPLEMENTED");
		return false;
	}

	/**
	 * Determines if the given representation of the puzzle presented in lab
	 * can be solved.
	 * 
	 * @param row
	 * @return
	 */
	public boolean isSolvable(int[] row) {
		// ------------------------------- //
		// TODO IMPLEMENT ISSOLVABLE HERE! //
		// ------------------------------- //
		System.out.println("NOT IMPLEMENTED");
		return false;
	}

	/**
	 * Determines the highest-scoring Scrabble word given the letters.
	 * 
	 * @param letters
	 * @return
	 */
	public String highestScoringWord(String letters) {
		// --------------------------------------- //
		// TODO IMPLEMENT HIGHESTSCORINGWORD HERE! //
		// --------------------------------------- //
		System.out.println("NOT IMPLEMENTED");
		return "";
	}
	
	/**
	 * Given the string of letters, find an anagram and return it as
	 * a List of words. If no anagram is found, return null.
	 * @param word
	 * @return
	 */
	public List<String> findAnagram(String word) {
		// ------------------------------ //
		// TODO IMPLEMENT FINDANGRAM HERE //
		// ------------------------------ //
		System.out.println("NOT IMPLEMENTED");
		return null;
	}
	
	/**
	 * Given the requests in a List and the stock length on hand, returns
	 * the minimum number of pieces of lumber necessary so that we can cut
	 * the stock lumber to the pieces we request.
	 * 
	 * @param requests
	 * @param stockLength
	 * @return
	 */
	public int cutStock(List<Integer> requests, int stockLength) {
		// ---------------------------- //
		// TODO IMPLEMENT CUTSTOCK HERE //
		// ---------------------------- //
		System.out.println("NOT IMPLEMENTED");
		return -1;
	}
	
	/**
	 * Given a character, will return the Scrabble score for that character.
	 * A non-letter character will return a score of 0.
	 * 
	 * @param c
	 * @return
	 */
	private int scoreCharacter(char c) {
		Character.toLowerCase(c);
		switch (c) {
		case 'a': case 'e': case 'i': case 'o': case 'u':
		case 'l': case 'n': case 'r': case 't': case 's':
			return 1;

		case 'd': case 'g':
			return 2;

		case 'b': case 'c': case 'm': case 'p':
			return 3;

		case 'f': case 'h': case 'v': case 'w': case 'y':
			return 4;

		case 'k':
			return 5;

		case 'j': case 'x':
			return 8;

		case 'q': case 'z':
			return 10;

		default:
			return 0;

		}
	}
	// EVERYTHING BELOW IS SETUP CODE AND CODE THAT DOESN'T NEED
	// TO BE CHANGED.

	private final static String BUTTON_RUN = "Run all!";
	private final static String BUTTON_TEST = "Test";

	/**
	 * Nothing fancy. Just adds two buttons to test and run.
	 */
	@Override
	public void init() {
		setTitle("Recursion");
		JButton run = new JButton(BUTTON_RUN);
		JButton test = new JButton(BUTTON_TEST);
		run.addActionListener(this);
		test.addActionListener(this);
		add(run, NORTH);
		add(test, NORTH);
	}

	/**
	 * Either runs tests or runs all problems depending on button
	 * clicked.
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getActionCommand().equals(BUTTON_RUN)) {
			runAllProblems();
		} else if (e.getActionCommand().equals(BUTTON_TEST)) {
			test();
		}
	}

	/**
	 * Blocks until text is read.
	 */
	private static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	private static void waitUntilEnter() {
		System.out.println("Press enter to continue...");
		try {
			in.readLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Nothing.
	 */
	@Override
	public void run() {}

	/**
	 * Runs all the recursion problems in order. Do not change this.
	 */
	private void runAllProblems() {
		System.out.println("==========================");
		System.out.println("Now Running mnemonicPlease");
		System.out.println("==========================");
		System.out.println("Testing with 92");
		mnemonicPlease("92");
		waitUntilEnter();
		System.out.println("Testing with 748");
		mnemonicPlease("748");
		waitUntilEnter();

		System.out.println("==========================");
		System.out.println("Now Running canSumTo");
		System.out.println("==========================");
		System.out.println("Testing {2,2,5,-4,-3} with target 0 (Should be true)");
		System.out.println("Result: " + canSumTo(new HashSet<Integer>(Arrays.asList(new Integer[] {2,2,5,-4,-3})), 0));
		waitUntilEnter();
		System.out.println("Testing {4,5,1,-12,0} with target 3 (Should be false)");
		System.out.println("Result: " + canSumTo(new HashSet<Integer>(Arrays.asList(new Integer[] {4,5,1,-12,0})), 3));
		waitUntilEnter();

		System.out.println("==========================");
		System.out.println("Now Running isSolvable");
		System.out.println("==========================");
		System.out.println("Testing {4,6,1,2,2,3,3,1,0} (Should be solvable)");
		System.out.println("Solvable? " + isSolvable(new int[] {4,6,1,2,2,3,3,1,0})); // Is solvable
		waitUntilEnter();
		System.out.println("Testing {4,1,4,5,1,5,1,0} (Not solvable)");
		System.out.println("Solvable? " + isSolvable(new int[] {4,1,4,5,1,5,1,0})); // Not solvable
		waitUntilEnter();

		System.out.println("==========================");
		System.out.println("Now Running highestScoringWord");
		System.out.println("==========================");
		System.out.println("Testing with \"einrfgm\". (FINGER or FRINGE or FERMI all worth 10 points)");
		System.out.println("Highest scoring word: " + highestScoringWord("einrfgm"));
		waitUntilEnter();
		System.out.println("Testing with \"AQFLIB\". (QI worth 11 points)");
		System.out.println("Highest scoring word: " + highestScoringWord("AQFLIB"));
		waitUntilEnter();
		
		System.out.println("==========================");
		System.out.println("Now Running findAnagram");
		System.out.println("==========================");
		System.out.println("Testing with \"epgyrocks\"");
		System.out.println("findAnagram returned: " + findAnagram("epgyrocks"));
		waitUntilEnter();
		System.out.println("Testing with \"intelligence\"");
		System.out.println("findAnagram returned: " + findAnagram("intelligence"));
		waitUntilEnter();
		
		System.out.println("==========================");
		System.out.println("Now Running findAnagram");
		System.out.println("==========================");
		System.out.println("Testing with requests {1,3,4,3,1} and stock length 4 (should require 3)");
		System.out.println("Result: " + cutStock(Arrays.asList(new Integer[] {1,3,4,3,1}), 4));
		waitUntilEnter();
		System.out.println("Testing with requests {3,3,3,3,3} and stock length 4 (should require 5)");
		System.out.println("Result: " + cutStock(Arrays.asList(new Integer[] {3,3,3,3,3}), 4));
		waitUntilEnter();
		System.out.println("Testing with requests {2,2,3,3} and stock length 5 (should require 2)");
		System.out.println("Result: " + cutStock(Arrays.asList(new Integer[] {2,2,3,3}), 5));
		waitUntilEnter();
		System.out.println("Testing with requests {3,3,2,2,2,2} and stock length 7 (should require 2)");
		System.out.println("Result: " + cutStock(Arrays.asList(new Integer[] {3,3,2,2,2,2}), 7));
		waitUntilEnter();
		
		System.out.println("===============================");
		System.out.println("===  ALL TESTS COMPLETE! :) ===");
		System.out.println("===============================");
		
	}
}
